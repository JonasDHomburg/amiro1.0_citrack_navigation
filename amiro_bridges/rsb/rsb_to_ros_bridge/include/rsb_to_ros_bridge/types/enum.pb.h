// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef PROTOBUF_enum_2eproto__INCLUDED
#define PROTOBUF_enum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace twbTracking {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_enum_2eproto();
void protobuf_AssignDesc_enum_2eproto();
void protobuf_ShutdownFile_enum_2eproto();


enum Type {
  ArMarker = 0
};
bool Type_IsValid(int value);
const Type Type_MIN = ArMarker;
const Type Type_MAX = ArMarker;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Unit {
  Pixel = 0,
  Millimeter = 1,
  Meter = 2
};
bool Unit_IsValid(int value);
const Unit Unit_MIN = Pixel;
const Unit Unit_MAX = Meter;
const int Unit_ARRAYSIZE = Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Unit_descriptor();
inline const ::std::string& Unit_Name(Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Unit_descriptor(), value);
}
inline bool Unit_Parse(
    const ::std::string& name, Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Unit>(
    Unit_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace twbTracking

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::twbTracking::proto::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::twbTracking::proto::Type>() {
  return ::twbTracking::proto::Type_descriptor();
}
template <> struct is_proto_enum< ::twbTracking::proto::Unit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::twbTracking::proto::Unit>() {
  return ::twbTracking::proto::Unit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_enum_2eproto__INCLUDED

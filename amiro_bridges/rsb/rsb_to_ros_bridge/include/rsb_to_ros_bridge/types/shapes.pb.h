// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shapes.proto

#ifndef PROTOBUF_shapes_2eproto__INCLUDED
#define PROTOBUF_shapes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vertex.pb.h"
// @@protoc_insertion_point(includes)

namespace twbTracking {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shapes_2eproto();
void protobuf_AssignDesc_shapes_2eproto();
void protobuf_ShutdownFile_shapes_2eproto();

class Polygon;
class Ellipse;

// ===================================================================

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .twbTracking.proto.Translation vertex = 1;
  inline int vertex_size() const;
  inline void clear_vertex();
  static const int kVertexFieldNumber = 1;
  inline const ::twbTracking::proto::Translation& vertex(int index) const;
  inline ::twbTracking::proto::Translation* mutable_vertex(int index);
  inline ::twbTracking::proto::Translation* add_vertex();
  inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Translation >&
      vertex() const;
  inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Translation >*
      mutable_vertex();

  // @@protoc_insertion_point(class_scope:twbTracking.proto.Polygon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Translation > vertex_;
  friend void  protobuf_AddDesc_shapes_2eproto();
  friend void protobuf_AssignDesc_shapes_2eproto();
  friend void protobuf_ShutdownFile_shapes_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class Ellipse : public ::google::protobuf::Message {
 public:
  Ellipse();
  virtual ~Ellipse();

  Ellipse(const Ellipse& from);

  inline Ellipse& operator=(const Ellipse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ellipse& default_instance();

  void Swap(Ellipse* other);

  // implements Message ----------------------------------------------

  Ellipse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ellipse& from);
  void MergeFrom(const Ellipse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .twbTracking.proto.Translation center = 1;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 1;
  inline const ::twbTracking::proto::Translation& center() const;
  inline ::twbTracking::proto::Translation* mutable_center();
  inline ::twbTracking::proto::Translation* release_center();
  inline void set_allocated_center(::twbTracking::proto::Translation* center);

  // required float xradius = 2;
  inline bool has_xradius() const;
  inline void clear_xradius();
  static const int kXradiusFieldNumber = 2;
  inline float xradius() const;
  inline void set_xradius(float value);

  // required float yradius = 3;
  inline bool has_yradius() const;
  inline void clear_yradius();
  static const int kYradiusFieldNumber = 3;
  inline float yradius() const;
  inline void set_yradius(float value);

  // optional float zradius = 4;
  inline bool has_zradius() const;
  inline void clear_zradius();
  static const int kZradiusFieldNumber = 4;
  inline float zradius() const;
  inline void set_zradius(float value);

  // @@protoc_insertion_point(class_scope:twbTracking.proto.Ellipse)
 private:
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_xradius();
  inline void clear_has_xradius();
  inline void set_has_yradius();
  inline void clear_has_yradius();
  inline void set_has_zradius();
  inline void clear_has_zradius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::twbTracking::proto::Translation* center_;
  float xradius_;
  float yradius_;
  float zradius_;
  friend void  protobuf_AddDesc_shapes_2eproto();
  friend void protobuf_AssignDesc_shapes_2eproto();
  friend void protobuf_ShutdownFile_shapes_2eproto();

  void InitAsDefaultInstance();
  static Ellipse* default_instance_;
};
// ===================================================================


// ===================================================================

// Polygon

// repeated .twbTracking.proto.Translation vertex = 1;
inline int Polygon::vertex_size() const {
  return vertex_.size();
}
inline void Polygon::clear_vertex() {
  vertex_.Clear();
}
inline const ::twbTracking::proto::Translation& Polygon::vertex(int index) const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Polygon.vertex)
  return vertex_.Get(index);
}
inline ::twbTracking::proto::Translation* Polygon::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.Polygon.vertex)
  return vertex_.Mutable(index);
}
inline ::twbTracking::proto::Translation* Polygon::add_vertex() {
  // @@protoc_insertion_point(field_add:twbTracking.proto.Polygon.vertex)
  return vertex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Translation >&
Polygon::vertex() const {
  // @@protoc_insertion_point(field_list:twbTracking.proto.Polygon.vertex)
  return vertex_;
}
inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Translation >*
Polygon::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:twbTracking.proto.Polygon.vertex)
  return &vertex_;
}

// -------------------------------------------------------------------

// Ellipse

// required .twbTracking.proto.Translation center = 1;
inline bool Ellipse::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ellipse::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ellipse::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ellipse::clear_center() {
  if (center_ != NULL) center_->::twbTracking::proto::Translation::Clear();
  clear_has_center();
}
inline const ::twbTracking::proto::Translation& Ellipse::center() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Ellipse.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::twbTracking::proto::Translation* Ellipse::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::twbTracking::proto::Translation;
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.Ellipse.center)
  return center_;
}
inline ::twbTracking::proto::Translation* Ellipse::release_center() {
  clear_has_center();
  ::twbTracking::proto::Translation* temp = center_;
  center_ = NULL;
  return temp;
}
inline void Ellipse::set_allocated_center(::twbTracking::proto::Translation* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:twbTracking.proto.Ellipse.center)
}

// required float xradius = 2;
inline bool Ellipse::has_xradius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ellipse::set_has_xradius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ellipse::clear_has_xradius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ellipse::clear_xradius() {
  xradius_ = 0;
  clear_has_xradius();
}
inline float Ellipse::xradius() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Ellipse.xradius)
  return xradius_;
}
inline void Ellipse::set_xradius(float value) {
  set_has_xradius();
  xradius_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Ellipse.xradius)
}

// required float yradius = 3;
inline bool Ellipse::has_yradius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ellipse::set_has_yradius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ellipse::clear_has_yradius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ellipse::clear_yradius() {
  yradius_ = 0;
  clear_has_yradius();
}
inline float Ellipse::yradius() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Ellipse.yradius)
  return yradius_;
}
inline void Ellipse::set_yradius(float value) {
  set_has_yradius();
  yradius_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Ellipse.yradius)
}

// optional float zradius = 4;
inline bool Ellipse::has_zradius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ellipse::set_has_zradius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ellipse::clear_has_zradius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ellipse::clear_zradius() {
  zradius_ = 0;
  clear_has_zradius();
}
inline float Ellipse::zradius() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Ellipse.zradius)
  return zradius_;
}
inline void Ellipse::set_zradius(float value) {
  set_has_zradius();
  zradius_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Ellipse.zradius)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace twbTracking

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shapes_2eproto__INCLUDED

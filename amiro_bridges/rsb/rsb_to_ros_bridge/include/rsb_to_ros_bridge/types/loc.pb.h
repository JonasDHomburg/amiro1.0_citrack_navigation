// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loc.proto

#ifndef PROTOBUF_loc_2eproto__INCLUDED
#define PROTOBUF_loc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "shapes.pb.h"
#include "enum.pb.h"
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace twbTracking {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loc_2eproto();
void protobuf_AssignDesc_loc_2eproto();
void protobuf_ShutdownFile_loc_2eproto();

class ObjectList;
class Object;

// ===================================================================

class ObjectList : public ::google::protobuf::Message {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectList& default_instance();

  void Swap(ObjectList* other);

  // implements Message ----------------------------------------------

  ObjectList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .twbTracking.proto.Object object = 1;
  inline int object_size() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 1;
  inline const ::twbTracking::proto::Object& object(int index) const;
  inline ::twbTracking::proto::Object* mutable_object(int index);
  inline ::twbTracking::proto::Object* add_object();
  inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Object >&
      object() const;
  inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Object >*
      mutable_object();

  // @@protoc_insertion_point(class_scope:twbTracking.proto.ObjectList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Object > object_;
  friend void  protobuf_AddDesc_loc_2eproto();
  friend void protobuf_AssignDesc_loc_2eproto();
  friend void protobuf_ShutdownFile_loc_2eproto();

  void InitAsDefaultInstance();
  static ObjectList* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .twbTracking.proto.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::twbTracking::proto::Type type() const;
  inline void set_type(::twbTracking::proto::Type value);

  // optional float confidence = 3;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  inline float confidence() const;
  inline void set_confidence(float value);

  // required .twbTracking.proto.Unit unit = 4;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 4;
  inline ::twbTracking::proto::Unit unit() const;
  inline void set_unit(::twbTracking::proto::Unit value);

  // required .twbTracking.proto.Pose position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline const ::twbTracking::proto::Pose& position() const;
  inline ::twbTracking::proto::Pose* mutable_position();
  inline ::twbTracking::proto::Pose* release_position();
  inline void set_allocated_position(::twbTracking::proto::Pose* position);

  // optional .twbTracking.proto.Polygon polygon = 6;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 6;
  inline const ::twbTracking::proto::Polygon& polygon() const;
  inline ::twbTracking::proto::Polygon* mutable_polygon();
  inline ::twbTracking::proto::Polygon* release_polygon();
  inline void set_allocated_polygon(::twbTracking::proto::Polygon* polygon);

  // optional .twbTracking.proto.Ellipse ellipse = 7;
  inline bool has_ellipse() const;
  inline void clear_ellipse();
  static const int kEllipseFieldNumber = 7;
  inline const ::twbTracking::proto::Ellipse& ellipse() const;
  inline ::twbTracking::proto::Ellipse* mutable_ellipse();
  inline ::twbTracking::proto::Ellipse* release_ellipse();
  inline void set_allocated_ellipse(::twbTracking::proto::Ellipse* ellipse);

  // @@protoc_insertion_point(class_scope:twbTracking.proto.Object)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_polygon();
  inline void clear_has_polygon();
  inline void set_has_ellipse();
  inline void clear_has_ellipse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  int type_;
  float confidence_;
  int unit_;
  ::twbTracking::proto::Pose* position_;
  ::twbTracking::proto::Polygon* polygon_;
  ::twbTracking::proto::Ellipse* ellipse_;
  friend void  protobuf_AddDesc_loc_2eproto();
  friend void protobuf_AssignDesc_loc_2eproto();
  friend void protobuf_ShutdownFile_loc_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// ===================================================================


// ===================================================================

// ObjectList

// repeated .twbTracking.proto.Object object = 1;
inline int ObjectList::object_size() const {
  return object_.size();
}
inline void ObjectList::clear_object() {
  object_.Clear();
}
inline const ::twbTracking::proto::Object& ObjectList::object(int index) const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.ObjectList.object)
  return object_.Get(index);
}
inline ::twbTracking::proto::Object* ObjectList::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.ObjectList.object)
  return object_.Mutable(index);
}
inline ::twbTracking::proto::Object* ObjectList::add_object() {
  // @@protoc_insertion_point(field_add:twbTracking.proto.ObjectList.object)
  return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Object >&
ObjectList::object() const {
  // @@protoc_insertion_point(field_list:twbTracking.proto.ObjectList.object)
  return object_;
}
inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Object >*
ObjectList::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:twbTracking.proto.ObjectList.object)
  return &object_;
}

// -------------------------------------------------------------------

// Object

// required uint32 id = 1;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Object::id() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Object.id)
}

// required .twbTracking.proto.Type type = 2;
inline bool Object::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::twbTracking::proto::Type Object::type() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.type)
  return static_cast< ::twbTracking::proto::Type >(type_);
}
inline void Object::set_type(::twbTracking::proto::Type value) {
  assert(::twbTracking::proto::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Object.type)
}

// optional float confidence = 3;
inline bool Object::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Object::confidence() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.confidence)
  return confidence_;
}
inline void Object::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Object.confidence)
}

// required .twbTracking.proto.Unit unit = 4;
inline bool Object::has_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline ::twbTracking::proto::Unit Object::unit() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.unit)
  return static_cast< ::twbTracking::proto::Unit >(unit_);
}
inline void Object::set_unit(::twbTracking::proto::Unit value) {
  assert(::twbTracking::proto::Unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:twbTracking.proto.Object.unit)
}

// required .twbTracking.proto.Pose position = 5;
inline bool Object::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_position() {
  if (position_ != NULL) position_->::twbTracking::proto::Pose::Clear();
  clear_has_position();
}
inline const ::twbTracking::proto::Pose& Object::position() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::twbTracking::proto::Pose* Object::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::twbTracking::proto::Pose;
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.Object.position)
  return position_;
}
inline ::twbTracking::proto::Pose* Object::release_position() {
  clear_has_position();
  ::twbTracking::proto::Pose* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Object::set_allocated_position(::twbTracking::proto::Pose* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:twbTracking.proto.Object.position)
}

// optional .twbTracking.proto.Polygon polygon = 6;
inline bool Object::has_polygon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_polygon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_polygon() {
  if (polygon_ != NULL) polygon_->::twbTracking::proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::twbTracking::proto::Polygon& Object::polygon() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::twbTracking::proto::Polygon* Object::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::twbTracking::proto::Polygon;
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.Object.polygon)
  return polygon_;
}
inline ::twbTracking::proto::Polygon* Object::release_polygon() {
  clear_has_polygon();
  ::twbTracking::proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Object::set_allocated_polygon(::twbTracking::proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:twbTracking.proto.Object.polygon)
}

// optional .twbTracking.proto.Ellipse ellipse = 7;
inline bool Object::has_ellipse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_ellipse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_ellipse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_ellipse() {
  if (ellipse_ != NULL) ellipse_->::twbTracking::proto::Ellipse::Clear();
  clear_has_ellipse();
}
inline const ::twbTracking::proto::Ellipse& Object::ellipse() const {
  // @@protoc_insertion_point(field_get:twbTracking.proto.Object.ellipse)
  return ellipse_ != NULL ? *ellipse_ : *default_instance_->ellipse_;
}
inline ::twbTracking::proto::Ellipse* Object::mutable_ellipse() {
  set_has_ellipse();
  if (ellipse_ == NULL) ellipse_ = new ::twbTracking::proto::Ellipse;
  // @@protoc_insertion_point(field_mutable:twbTracking.proto.Object.ellipse)
  return ellipse_;
}
inline ::twbTracking::proto::Ellipse* Object::release_ellipse() {
  clear_has_ellipse();
  ::twbTracking::proto::Ellipse* temp = ellipse_;
  ellipse_ = NULL;
  return temp;
}
inline void Object::set_allocated_ellipse(::twbTracking::proto::Ellipse* ellipse) {
  delete ellipse_;
  ellipse_ = ellipse;
  if (ellipse) {
    set_has_ellipse();
  } else {
    clear_has_ellipse();
  }
  // @@protoc_insertion_point(field_set_allocated:twbTracking.proto.Object.ellipse)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace twbTracking

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loc_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shapes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shapes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace twbTracking {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ellipse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ellipse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_shapes_2eproto() {
  protobuf_AddDesc_shapes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "shapes.proto");
  GOOGLE_CHECK(file != NULL);
  Polygon_descriptor_ = file->message_type(0);
  static const int Polygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, vertex_),
  };
  Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Polygon));
  Ellipse_descriptor_ = file->message_type(1);
  static const int Ellipse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, xradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, yradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, zradius_),
  };
  Ellipse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ellipse_descriptor_,
      Ellipse::default_instance_,
      Ellipse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ellipse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ellipse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_shapes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ellipse_descriptor_, &Ellipse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_shapes_2eproto() {
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete Ellipse::default_instance_;
  delete Ellipse_reflection_;
}

void protobuf_AddDesc_shapes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::twbTracking::proto::protobuf_AddDesc_vertex_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014shapes.proto\022\021twbTracking.proto\032\014verte"
    "x.proto\"9\n\007Polygon\022.\n\006vertex\030\001 \003(\0132\036.twb"
    "Tracking.proto.Translation\"l\n\007Ellipse\022.\n"
    "\006center\030\001 \002(\0132\036.twbTracking.proto.Transl"
    "ation\022\017\n\007xradius\030\002 \002(\002\022\017\n\007yradius\030\003 \002(\002\022"
    "\017\n\007zradius\030\004 \001(\002", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shapes.proto", &protobuf_RegisterTypes);
  Polygon::default_instance_ = new Polygon();
  Ellipse::default_instance_ = new Ellipse();
  Polygon::default_instance_->InitAsDefaultInstance();
  Ellipse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shapes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shapes_2eproto {
  StaticDescriptorInitializer_shapes_2eproto() {
    protobuf_AddDesc_shapes_2eproto();
  }
} static_descriptor_initializer_shapes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Polygon::kVertexFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:twbTracking.proto.Polygon)
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:twbTracking.proto.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:twbTracking.proto.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shapes_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New() const {
  return new Polygon;
}

void Polygon::Clear() {
  vertex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:twbTracking.proto.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .twbTracking.proto.Translation vertex = 1;
      case 1: {
        if (tag == 10) {
         parse_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:twbTracking.proto.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:twbTracking.proto.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:twbTracking.proto.Polygon)
  // repeated .twbTracking.proto.Translation vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:twbTracking.proto.Polygon)
}

::google::protobuf::uint8* Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:twbTracking.proto.Polygon)
  // repeated .twbTracking.proto.Translation vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:twbTracking.proto.Polygon)
  return target;
}

int Polygon::ByteSize() const {
  int total_size = 0;

  // repeated .twbTracking.proto.Translation vertex = 1;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_.MergeFrom(from.vertex_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vertex())) return false;
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other != this) {
    vertex_.Swap(&other->vertex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ellipse::kCenterFieldNumber;
const int Ellipse::kXradiusFieldNumber;
const int Ellipse::kYradiusFieldNumber;
const int Ellipse::kZradiusFieldNumber;
#endif  // !_MSC_VER

Ellipse::Ellipse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:twbTracking.proto.Ellipse)
}

void Ellipse::InitAsDefaultInstance() {
  center_ = const_cast< ::twbTracking::proto::Translation*>(&::twbTracking::proto::Translation::default_instance());
}

Ellipse::Ellipse(const Ellipse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:twbTracking.proto.Ellipse)
}

void Ellipse::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  xradius_ = 0;
  yradius_ = 0;
  zradius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ellipse::~Ellipse() {
  // @@protoc_insertion_point(destructor:twbTracking.proto.Ellipse)
  SharedDtor();
}

void Ellipse::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void Ellipse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ellipse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ellipse_descriptor_;
}

const Ellipse& Ellipse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shapes_2eproto();
  return *default_instance_;
}

Ellipse* Ellipse::default_instance_ = NULL;

Ellipse* Ellipse::New() const {
  return new Ellipse;
}

void Ellipse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ellipse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(xradius_, zradius_);
    if (has_center()) {
      if (center_ != NULL) center_->::twbTracking::proto::Translation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ellipse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:twbTracking.proto.Ellipse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .twbTracking.proto.Translation center = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xradius;
        break;
      }

      // required float xradius = 2;
      case 2: {
        if (tag == 21) {
         parse_xradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xradius_)));
          set_has_xradius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yradius;
        break;
      }

      // required float yradius = 3;
      case 3: {
        if (tag == 29) {
         parse_yradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yradius_)));
          set_has_yradius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_zradius;
        break;
      }

      // optional float zradius = 4;
      case 4: {
        if (tag == 37) {
         parse_zradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zradius_)));
          set_has_zradius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:twbTracking.proto.Ellipse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:twbTracking.proto.Ellipse)
  return false;
#undef DO_
}

void Ellipse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:twbTracking.proto.Ellipse)
  // required .twbTracking.proto.Translation center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }

  // required float xradius = 2;
  if (has_xradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xradius(), output);
  }

  // required float yradius = 3;
  if (has_yradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yradius(), output);
  }

  // optional float zradius = 4;
  if (has_zradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->zradius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:twbTracking.proto.Ellipse)
}

::google::protobuf::uint8* Ellipse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:twbTracking.proto.Ellipse)
  // required .twbTracking.proto.Translation center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }

  // required float xradius = 2;
  if (has_xradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xradius(), target);
  }

  // required float yradius = 3;
  if (has_yradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yradius(), target);
  }

  // optional float zradius = 4;
  if (has_zradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->zradius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:twbTracking.proto.Ellipse)
  return target;
}

int Ellipse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .twbTracking.proto.Translation center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // required float xradius = 2;
    if (has_xradius()) {
      total_size += 1 + 4;
    }

    // required float yradius = 3;
    if (has_yradius()) {
      total_size += 1 + 4;
    }

    // optional float zradius = 4;
    if (has_zradius()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ellipse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ellipse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ellipse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ellipse::MergeFrom(const Ellipse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::twbTracking::proto::Translation::MergeFrom(from.center());
    }
    if (from.has_xradius()) {
      set_xradius(from.xradius());
    }
    if (from.has_yradius()) {
      set_yradius(from.yradius());
    }
    if (from.has_zradius()) {
      set_zradius(from.zradius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ellipse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ellipse::CopyFrom(const Ellipse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ellipse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void Ellipse::Swap(Ellipse* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(xradius_, other->xradius_);
    std::swap(yradius_, other->yradius_);
    std::swap(zradius_, other->zradius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ellipse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ellipse_descriptor_;
  metadata.reflection = Ellipse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace twbTracking

// @@protoc_insertion_point(global_scope)
